//
//  PopularTVShowsPresenter.swift
//  TVShows
//
//  Created by Vedran Burojevic on 06/05/16.
//  Copyright (c) 2016 1337code. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import NSObject_Rx

final class PopularTVShowsPresenter: NSObject {

    // MARK: - Public properties -

    let loadingObservable: Observable<Bool>
    let contentChangesObservable: Observable<[APITVShow]>
    let errorObservable: Observable<(title: String, message: String)>
    
    // MARK: - Private properties -

    private unowned var _view: PopularTVShowsViewInterface
    private var _interactor: PopularTVShowsInteractor
    private var _wireframe: PopularTVShowsWireframeInterface

    private let _loading = Variable(false)
    private let _tvShows = Variable([APITVShow]())
    private let _errorSubject = PublishSubject<(title: String, message: String)>()
    
    // MARK: - Lifecycle -

    init (wireframe: PopularTVShowsWireframeInterface, view: PopularTVShowsViewInterface, interactor: PopularTVShowsInteractor) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
        contentChangesObservable = _tvShows.asObservable()
        errorObservable = _errorSubject.asObservable()
        loadingObservable = _loading.asObservable()
    }
    
}

extension PopularTVShowsPresenter: PopularTVShowsViewDelegateInterface {

    func titleText() -> String {
        return "Popular TV Shows"
    }

    func viewDidLoad() {
        _loading.value = true

        _interactor
        .loadPopularTVShows(extended: "images")
        .subscribe(onSuccess: { [weak self] tvShows in
            self?._tvShows.value = tvShows
            self?._loading.value = false
        }, onFailure: { [weak self] error in
            self?._loading.value = false
            self?._errorSubject.onNext((title: error.title, message: error.message))
        })
    }

    func didSelectNavigationAction(action: PopularTVShowsNavigationAction) {
        _wireframe.performNavigationAction(action)
    }
}
