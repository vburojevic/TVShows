// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `LaunchScreen`.
    static let launchScreen = _R.nib._LaunchScreen()
    /// Nib `TVShowTableViewCell`.
    static let tVShowTableViewCell = _R.nib._TVShowTableViewCell()
    
    /// `UINib(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UINib {
      return UINib(resource: R.nib.launchScreen)
    }
    
    /// `UINib(name: "TVShowTableViewCell", bundle: ...)`
    static func tVShowTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.tVShowTableViewCell)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `TVShowTableViewCell`.
    static let tVShowTableViewCell: ReuseIdentifier<TVShowTableViewCell> = ReuseIdentifier(identifier: "TVShowTableViewCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "co.1337code.TVShows") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _LaunchScreen: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    struct _TVShowTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = TVShowTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "TVShowTableViewCell"
      let name = "TVShowTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TVShowTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TVShowTableViewCell
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PopularTVShowsViewController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      let popularTVShowsViewController = StoryboardViewControllerResource<PopularTVShowsViewController>(identifier: "PopularTVShowsViewController")
      
      func popularTVShowsViewController(_: Void) -> PopularTVShowsViewController? {
        return UIStoryboard(resource: self).instantiateViewController(popularTVShowsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().popularTVShowsViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'popularTVShowsViewController' could not be loaded from storyboard 'Main' as 'PopularTVShowsViewController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}